[deoptimize context: c8f14679]
[marking STRING_ADD_RIGHT 0x9b10a780 for recompilation, reason: small function, ICs with typeinfo: 0/3 (0%)]
[disabled optimization for STRING_ADD_RIGHT, reason: inlined runtime function: IsStringWrapperSafeForDefaultValueOf]
[marking  0xdb37a908 for recompilation, reason: hot and stable, ICs with typeinfo: 3/9 (33%)]
[optimizing:  / db37a909 - took 0.000, 0.000, 0.000 ms]
[marking random 0x9b11c828 for recompilation, reason: small function, ICs with typeinfo: 0/0 (100%)]
[optimizing: random / 9b11c829 - took 0.000, 0.000, 0.000 ms]
[disabled optimization for , reason: eval]
[disabled optimization for , reason: eval]
**** DEOPT:  at bailout #7, address 0x0, frame size 160
            ;;; @176: deoptimize.
[deoptimizing: begin 0xdb37a909  @7]
  translating  => node=114, height=32
    0x001bf3e0: [top + 104] <- 0xdb37aa49 ; [sp + 48] 00000000DB37AA49 <an Object>
    0x001bf3d8: [top + 96] <- 000000009B104121 <undefined> ; literal
    0x001bf3d0: [top + 88] <- 0xdb37aa01 ; [sp + 64] 00000000DB37AA01 <JS Function require>
    0x001bf3c8: [top + 80] <- 000000009B104121 <undefined> ; literal
    0x001bf3c0: [top + 72] <- 000000009B104121 <undefined> ; literal
    0x001bf3b8: [top + 64] <- 000000009B104121 <undefined> ; literal
    0x001bf3b0: [top + 56] <- 0x0291247e ; caller's pc
    0x001bf3a8: [top + 48] <- 0x001bf410 ; caller's fp
    0x001bf3a0: [top + 40] <- 0xdb37a899; context
    0x001bf398: [top + 32] <- 0xdb37a909; function
    0x001bf390: [top + 24] <- 1000000 ; [sp + 72] (smi)
    0x001bf388: [top + 16] <- 1000000 ; [sp + 40] (smi)
    0x001bf380: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf378: [top + 0] <- 0xc8fab021 ; rbx 00000000C8FAB021 <an Object>
[deoptimizing: end 0xdb37a909  => node=114, pc=0x0296aa55, state=TOS_REG, alignment=no padding, took 0.000 ms]
[removing optimized code for: ]
[marking _makeBuckets 0x9b11f198 for recompilation, reason: small function, ICs with typeinfo: 4/8 (50%)]
[optimizing: _makeBuckets / 9b11f199 - took 0.000, 0.000, 0.000 ms]
[marking hash 0xdb3cece0 for recompilation, reason: small function, ICs with typeinfo: 3/15 (20%)]
[marking _keyAsBucketIndex 0x9b11f1e0 for recompilation, reason: small function, ICs with typeinfo: 2/3 (66%)]
[marking _isOverCapacity 0x9b11f300 for recompilation, reason: small function, ICs with typeinfo: 4/5 (80%)]
[marking _checkResize 0x9b11f348 for recompilation, reason: small function, ICs with typeinfo: 2/4 (50%)]
Inlined hashInt called from hash.
Inlined hash called from _keyAsBucketIndex.
[optimizing: _keyAsBucketIndex / 9b11f1e1 - took 0.000, 0.000, 0.000 ms]
Inlined _isOverCapacity called from _checkResize.
[optimizing: _checkResize / 9b11f349 - took 0.000, 0.000, 0.000 ms]
[marking set 0x9b11f540 for recompilation, reason: hot and stable, ICs with typeinfo: 21/28 (75%)]
Inlined hashInt called from hash.
Inlined hash called from _keyAsBucketIndex.
Inlined _keyAsBucketIndex called from set.
Inlined _isOverCapacity called from _checkResize.
Inlined _checkResize called from set.
Did not inline equals called from set (cumulative AST node limit reached).
[optimizing: set / 9b11f541 - took 0.000, 1.000, 0.000 ms]
[marking equals 0xdb3ced28 for recompilation, reason: small function, ICs with typeinfo: 0/1 (0%)]
[optimizing: equals / db3ced29 - took 0.000, 0.000, 0.000 ms]
[marking ENTRY_FUNCTION_MAP 0xdb3c5e28 for recompilation, reason: not much type info but very hot, ICs with typeinfo: 3/37 (8%)]
Did not inline set called from ENTRY_FUNCTION_MAP (target text too big).
Did not inline global.setTimeout called from ENTRY_FUNCTION_MAP (target requires context change).
[optimizing: ENTRY_FUNCTION_MAP / db3c5e29 - took 0.000, 0.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_MAP at bailout #8, address 0x0, frame size 296
            ;;; @124: deoptimize.
[deoptimizing: begin 0xdb3c5e29 ENTRY_FUNCTION_MAP @8]
  translating ENTRY_FUNCTION_MAP => node=115, height=64
    0x001bf370: [top + 96] <- 0x9b106c91 ; [sp + 144] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 88] <- 0x0296abdc ; caller's pc
    0x001bf360: [top + 80] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 72] <- 0xdb3c5e71; context
    0x001bf350: [top + 64] <- 0xdb3c5e29; function
    0x001bf348: [top + 56] <- 0xdb3c5d91 ; [sp + 160] 00000000DB3C5D91 <a Map>
    0x001bf340: [top + 48] <- 0xdb3c5e11 ; [sp + 168] 00000000DB3C5E11 <an Object>
    0x001bf338: [top + 40] <- 0x9b104121 ; [sp + 176] 000000009B104121 <undefined>
    0x001bf330: [top + 32] <- 0xf424000000000 ; [sp + 192] 1000000
    0x001bf328: [top + 24] <- 0 ; rbx (smi)
    0x001bf320: [top + 16] <- 000000009B104121 <undefined> ; literal
    0x001bf318: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf310: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xdb3c5e29 ENTRY_FUNCTION_MAP => node=115, pc=0x02968a67, state=NO_REGISTERS, alignment=no padding, took 1.000 ms]
[removing optimized code for: ENTRY_FUNCTION_MAP]
[marking get 0x9b11f4f8 for recompilation, reason: small function, ICs with typeinfo: 6/8 (75%)]
Inlined hashInt called from hash.
Inlined hash called from _keyAsBucketIndex.
Inlined _keyAsBucketIndex called from get.
Inlined equals called from _getEntryIndexWithKey.
Inlined _getEntryIndexWithKey called from get.
[optimizing: get / 9b11f4f9 - took 0.000, 0.000, 0.000 ms]
**** DEOPT: get at bailout #42, address 0x0, frame size 136
            ;;; @378: deoptimize.
[deoptimizing: begin 0x9b11f4f9 get @42]
  translating get => node=73, height=24
    0x001bf308: [top + 64] <- 0xdb3c5d91 ; rcx 00000000DB3C5D91 <a Map>
    0x001bf300: [top + 56] <- 0x18b00000000 ; [sp + 168] 395
    0x001bf2f8: [top + 48] <- 0x02968a0d ; caller's pc
    0x001bf2f0: [top + 40] <- 0x001bf360 ; caller's fp
    0x001bf2e8: [top + 32] <- 0xdb3c5cc9; context
    0x001bf2e0: [top + 24] <- 0x9b11f4f9; function
    0x001bf2d8: [top + 16] <- 1236549 ; rbx (smi)
    0x001bf2d0: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf2c8: [top + 0] <- 0x9b11f4f9 ; [sp + 120] 000000009B11F4F9 <JS Function get>
  translating _getEntryIndexWithKey => node=105, height=40
    0x001bf2c0: [top + 88] <- 0xdb3c5d91 ; rcx 00000000DB3C5D91 <a Map>
    0x001bf2b8: [top + 80] <- 1236549 ; r15 (smi)
    0x001bf2b0: [top + 72] <- 0x18b00000000 ; [sp + 168] 395
    0x001bf2a8: [top + 64] <- 0x0298ef06 ; caller's pc
    0x001bf2a0: [top + 56] <- 0x001bf2f0 ; caller's fp
    0x001bf298: [top + 48] <- 0xdb3c5cc9; context
    0x001bf290: [top + 40] <- 0x9b11f391; function
    0x001bf288: [top + 32] <- 00000000DB3CED29 <JS Function equals> ; literal
    0x001bf280: [top + 24] <- 0xdb3c5d71 ; rdi 00000000DB3C5D71 <JS Array[4194304]>
    0x001bf278: [top + 16] <- 2097151 ; r8 (smi)
    0x001bf270: [top + 8] <- 0x9500000000 ; rax 149
    0x001bf268: [top + 0] <- 000000009B11F391 <JS Function _getEntryIndexWithKey> ; literal
[deoptimizing: end 0x9b11f391 _getEntryIndexWithKey => node=105, pc=0x0298f169, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: get]
[marking get 0x9b11f4f8 for recompilation, reason: small function, ICs with typeinfo: 6/8 (75%)]
Inlined hashInt called from hash.
Inlined hash called from _keyAsBucketIndex.
Inlined _keyAsBucketIndex called from get.
Inlined equals called from _getEntryIndexWithKey.
Inlined _getEntryIndexWithKey called from get.
[optimizing: get / 9b11f4f9 - took 0.000, 0.000, 0.000 ms]
[marking ENTRY_FUNCTION_MAP 0xdb3c5e28 for recompilation, reason: hot and stable, ICs with typeinfo: 7/37 (18%)]
Did not inline set called from ENTRY_FUNCTION_MAP (target text too big).
Did not inline get called from ENTRY_FUNCTION_MAP (target requires context change).
Did not inline now called from ENTRY_FUNCTION_MAP (target not inlineable).
Did not inline get called from ENTRY_FUNCTION_MAP (target requires context change).
Did not inline global.setTimeout called from ENTRY_FUNCTION_MAP (target requires context change).
[optimizing: ENTRY_FUNCTION_MAP / db3c5e29 - took 0.000, 0.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_MAP at bailout #17, address 0x0, frame size 288
            ;;; @210: deoptimize.
[deoptimizing: begin 0xdb3c5e29 ENTRY_FUNCTION_MAP @17]
  translating ENTRY_FUNCTION_MAP => node=172, height=64
    0x001bf370: [top + 96] <- 0x9b106c91 ; [sp + 96] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 88] <- 0x0296abdc ; caller's pc
    0x001bf360: [top + 80] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 72] <- 0xdb3c5e71; context
    0x001bf350: [top + 64] <- 0xdb3c5e29; function
    0x001bf348: [top + 56] <- 0xdb3c5d91 ; [sp + 120] 00000000DB3C5D91 <a Map>
    0x001bf340: [top + 48] <- 000000009B104121 <undefined> ; literal
    0x001bf338: [top + 40] <- 0xdb3c5e11 ; [sp + 112] 00000000DB3C5E11 <an Object>
    0x001bf330: [top + 32] <- 0xf424000000000 ; [sp + 128] 1000000
    0x001bf328: [top + 24] <- 1000000 ; [sp + 80] (smi)
    0x001bf320: [top + 16] <- 0xc9f128b1 ; [sp + 184] 00000000C9F128B1 <Number: 1370628812198>
    0x001bf318: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf310: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xdb3c5e29 ENTRY_FUNCTION_MAP => node=172, pc=0x02968baa, state=NO_REGISTERS, alignment=no padding, took 1.000 ms]
[removing optimized code for: ENTRY_FUNCTION_MAP]
**** DEOPT: get at bailout #56, address 0x0, frame size 80
            ;;; Deferred code @364: tagged-to-i.
[deoptimizing: begin 0x9b11f4f9 get @56]
  translating get => node=73, height=24
    0x001bf308: [top + 64] <- 0xdb3c5d91 ; rax 00000000DB3C5D91 <a Map>
    0x001bf300: [top + 56] <- 0x1e848000000000 ; [sp + 112] 2000000
    0x001bf2f8: [top + 48] <- 0x02968c43 ; caller's pc
    0x001bf2f0: [top + 40] <- 0x001bf360 ; caller's fp
    0x001bf2e8: [top + 32] <- 0xdb3c5cc9; context
    0x001bf2e0: [top + 24] <- 0x9b11f4f9; function
    0x001bf2d8: [top + 16] <- 889880 ; rbx (smi)
    0x001bf2d0: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf2c8: [top + 0] <- 0x9b11f4f9 ; [sp + 64] 000000009B11F4F9 <JS Function get>
  translating _getEntryIndexWithKey => node=98, height=48
    0x001bf2c0: [top + 96] <- 0xdb3c5d91 ; rax 00000000DB3C5D91 <a Map>
    0x001bf2b8: [top + 88] <- 889880 ; r11 (smi)
    0x001bf2b0: [top + 80] <- 0x1e848000000000 ; [sp + 112] 2000000
    0x001bf2a8: [top + 72] <- 0x0298ef06 ; caller's pc
    0x001bf2a0: [top + 64] <- 0x001bf2f0 ; caller's fp
    0x001bf298: [top + 56] <- 0xdb3c5cc9; context
    0x001bf290: [top + 48] <- 0x9b11f391; function
    0x001bf288: [top + 40] <- 00000000DB3CED29 <JS Function equals> ; literal
    0x001bf280: [top + 32] <- 0xdb3c5d71 ; rdx 00000000DB3C5D71 <JS Array[4194304]>
    0x001bf278: [top + 24] <- 2097151 ; rcx (smi)
    0x001bf270: [top + 16] <- 0x9b104121 ; r14 000000009B104121 <undefined>
    0x001bf268: [top + 8] <- 000000009B11F391 <JS Function _getEntryIndexWithKey> ; literal
    0x001bf260: [top + 0] <- 00000000DB3CED29 <JS Function equals> ; literal
  translating equals => node=2, height=0
    0x001bf258: [top + 48] <- 000000009B104121 <undefined> ; literal
    0x001bf250: [top + 40] <- 0x9b104121 ; r14 000000009B104121 <undefined>
    0x001bf248: [top + 32] <- 0x1e848000000000 ; [sp + 112] 2000000
    0x001bf240: [top + 24] <- 0x0298f112 ; caller's pc
    0x001bf238: [top + 16] <- 0x001bf2a0 ; caller's fp
    0x001bf230: [top + 8] <- 0xdb3c5cc9; context
    0x001bf228: [top + 0] <- 0xdb3ced29; function
[deoptimizing: end 0xdb3ced29 equals => node=2, pc=0x0298ac34, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: get]
**** DEOPT: equals at bailout #1, address 0x0, frame size 0
            ;;; Deferred code @18: tagged-to-i.
[deoptimizing: begin 0xdb3ced29 equals @1]
  translating equals => node=3, height=0
    0x001bf258: [top + 48] <- 0x9b104121 ; [sp + 48] 000000009B104121 <undefined>
    0x001bf250: [top + 40] <- 0x9b104121 ; [sp + 40] 000000009B104121 <undefined>
    0x001bf248: [top + 32] <- 0x1e848100000000 ; [sp + 32] 2000001
    0x001bf240: [top + 24] <- 0x0298f112 ; caller's pc
    0x001bf238: [top + 16] <- 0x001bf2a0 ; caller's fp
    0x001bf230: [top + 8] <- 0xdb3c5cc9; context
    0x001bf228: [top + 0] <- 0xdb3ced29; function
[deoptimizing: end 0xdb3ced29 equals => node=3, pc=0x0298ac34, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: equals]
[marking equals 0xdb3ced28 for recompilation, reason: small function, ICs with typeinfo: 0/1 (0%)]
[optimizing: equals / db3ced29 - took 0.000, 0.000, 0.000 ms]
[marking get 0x9b11f4f8 for recompilation, reason: small function, ICs with typeinfo: 6/8 (75%)]
Inlined hashInt called from hash.
Inlined hash called from _keyAsBucketIndex.
Inlined _keyAsBucketIndex called from get.
Inlined equals called from _getEntryIndexWithKey.
Inlined _getEntryIndexWithKey called from get.
[optimizing: get / 9b11f4f9 - took 0.000, 0.000, 0.000 ms]
[marking ENTRY_FUNCTION_MAP 0xdb3c5e28 for recompilation, reason: hot and stable, ICs with typeinfo: 12/37 (32%)]
Did not inline set called from ENTRY_FUNCTION_MAP (target text too big).
Did not inline get called from ENTRY_FUNCTION_MAP (target requires context change).
Did not inline now called from ENTRY_FUNCTION_MAP (target not inlineable).
Did not inline get called from ENTRY_FUNCTION_MAP (target requires context change).
Did not inline get called from ENTRY_FUNCTION_MAP (target requires context change).
Did not inline global.setTimeout called from ENTRY_FUNCTION_MAP (target requires context change).
[optimizing: ENTRY_FUNCTION_MAP / db3c5e29 - took 0.000, 0.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_MAP at bailout #25, address 0x0, frame size 280
            ;;; @284: deoptimize.
[deoptimizing: begin 0xdb3c5e29 ENTRY_FUNCTION_MAP @25]
  translating ENTRY_FUNCTION_MAP => node=264, height=64
    0x001bf370: [top + 96] <- 0x9b106c91 ; [sp + 56] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 88] <- 0x0296abdc ; caller's pc
    0x001bf360: [top + 80] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 72] <- 0xdb3c5e71; context
    0x001bf350: [top + 64] <- 0xdb3c5e29; function
    0x001bf348: [top + 56] <- 0xdb3c5d91 ; [sp + 80] 00000000DB3C5D91 <a Map>
    0x001bf340: [top + 48] <- 000000009B104121 <undefined> ; literal
    0x001bf338: [top + 40] <- 0x9b104121 ; [sp + 72] 000000009B104121 <undefined>
    0x001bf330: [top + 32] <- 0xf424000000000 ; [sp + 88] 1000000
    0x001bf328: [top + 24] <- 3000000 ; [sp + 48] (smi)
    0x001bf320: [top + 16] <- 0xc9f128b1 ; [sp + 96] 00000000C9F128B1 <Number: 1370628812198>
    0x001bf318: [top + 8] <- 3000000 ; [sp + 104] (smi)
    0x001bf310: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xdb3c5e29 ENTRY_FUNCTION_MAP => node=264, pc=0x02968ce3, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: ENTRY_FUNCTION_MAP]
[marking ENTRY_FUNCTION_MAP 0xdb3c5e28 for recompilation, reason: hot and stable, ICs with typeinfo: 15/37 (40%)]
Did not inline set called from ENTRY_FUNCTION_MAP (target text too big).
Did not inline get called from ENTRY_FUNCTION_MAP (target requires context change).
Did not inline now called from ENTRY_FUNCTION_MAP (target not inlineable).
Did not inline get called from ENTRY_FUNCTION_MAP (target requires context change).
Did not inline get called from ENTRY_FUNCTION_MAP (target requires context change).
Did not inline get called from ENTRY_FUNCTION_MAP (target requires context change).
Did not inline global.setTimeout called from ENTRY_FUNCTION_MAP (target requires context change).
[optimizing: ENTRY_FUNCTION_MAP / db3c5e29 - took 1.000, 0.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_MAP at bailout #32, address 0x0, frame size 280
            ;;; @354: deoptimize.
[deoptimizing: begin 0xdb3c5e29 ENTRY_FUNCTION_MAP @32]
  translating ENTRY_FUNCTION_MAP => node=337, height=64
    0x001bf370: [top + 96] <- 0x9b106c91 ; [sp + 40] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 88] <- 0x0296abdc ; caller's pc
    0x001bf360: [top + 80] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 72] <- 0xdb3c5e71; context
    0x001bf350: [top + 64] <- 0xdb3c5e29; function
    0x001bf348: [top + 56] <- 0xdb3c5d91 ; [sp + 64] 00000000DB3C5D91 <a Map>
    0x001bf340: [top + 48] <- 000000009B104121 <undefined> ; literal
    0x001bf338: [top + 40] <- 0xdb3c5e11 ; [sp + 56] 00000000DB3C5E11 <an Object>
    0x001bf330: [top + 32] <- 0xf424000000000 ; [sp + 72] 1000000
    0x001bf328: [top + 24] <- 4294967295 ; [sp + 32] (heap number)
    0x001bf320: [top + 16] <- 0xc9f128b1 ; [sp + 80] 00000000C9F128B1 <Number: 1370628812198>
    0x001bf318: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf310: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xdb3c5e29 ENTRY_FUNCTION_MAP => node=337, pc=0x02968dfe, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
Materializing a new heap number FFFFFFFF00000000 [-1.000000e+000] in slot 00000000001BF328
[removing optimized code for: ENTRY_FUNCTION_MAP]
[marking ENTRY_FUNCTION_NATIVE 0xdb3d7498 for recompilation, reason: not much type info but very hot, ICs with typeinfo: 2/36 (5%)]
Did not inline global.setTimeout called from ENTRY_FUNCTION_NATIVE (target requires context change).
[optimizing: ENTRY_FUNCTION_NATIVE / db3d7499 - took 0.000, 1.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_NATIVE at bailout #4, address 0x0, frame size 280
            ;;; @96: deoptimize.
[deoptimizing: begin 0xdb3d7499 ENTRY_FUNCTION_NATIVE @4]
  translating ENTRY_FUNCTION_NATIVE => node=103, height=64
    0x001bf370: [top + 96] <- 0x9b106c91 ; [sp + 136] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 88] <- 0x0296ac2d ; caller's pc
    0x001bf360: [top + 80] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 72] <- 0xdb3d7509; context
    0x001bf350: [top + 64] <- 0xdb3d7499; function
    0x001bf348: [top + 56] <- 0xdb3d7569 ; [sp + 152] 00000000DB3D7569 <an Object>
    0x001bf340: [top + 48] <- 0xdb3d7599 ; [sp + 160] 00000000DB3D7599 <an Object>
    0x001bf338: [top + 40] <- 0x9b104121 ; [sp + 168] 000000009B104121 <undefined>
    0x001bf330: [top + 32] <- 0xf424000000000 ; [sp + 176] 1000000
    0x001bf328: [top + 24] <- 0 ; rbx (smi)
    0x001bf320: [top + 16] <- 000000009B104121 <undefined> ; literal
    0x001bf318: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf310: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xdb3d7499 ENTRY_FUNCTION_NATIVE => node=103, pc=0x02969257, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: ENTRY_FUNCTION_NATIVE]
[marking ENTRY_FUNCTION_NATIVE 0xdb3d7498 for recompilation, reason: hot and stable, ICs with typeinfo: 6/36 (16%)]
Did not inline now called from ENTRY_FUNCTION_NATIVE (target not inlineable).
Did not inline global.setTimeout called from ENTRY_FUNCTION_NATIVE (target requires context change).
[optimizing: ENTRY_FUNCTION_NATIVE / db3d7499 - took 0.000, 1.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_NATIVE at bailout #14, address 0x0, frame size 280
            ;;; @180: deoptimize.
[deoptimizing: begin 0xdb3d7499 ENTRY_FUNCTION_NATIVE @14]
  translating ENTRY_FUNCTION_NATIVE => node=155, height=64
    0x001bf370: [top + 96] <- 0x9b106c91 ; r9 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 88] <- 0x0296ac2d ; caller's pc
    0x001bf360: [top + 80] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 72] <- 0xdb3d7509; context
    0x001bf350: [top + 64] <- 0xdb3d7499; function
    0x001bf348: [top + 56] <- 0xdb3d7569 ; rdi 00000000DB3D7569 <an Object>
    0x001bf340: [top + 48] <- 000000009B104121 <undefined> ; literal
    0x001bf338: [top + 40] <- 0xdb3d7599 ; rdx 00000000DB3D7599 <an Object>
    0x001bf330: [top + 32] <- 0xf424000000000 ; rcx 1000000
    0x001bf328: [top + 24] <- 1000000 ; rax (smi)
    0x001bf320: [top + 16] <- 0xc8ee4671 ; [sp + 160] 00000000C8EE4671 <Number: 1370628812560>
    0x001bf318: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf310: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xdb3d7499 ENTRY_FUNCTION_NATIVE => node=155, pc=0x0296938e, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: ENTRY_FUNCTION_NATIVE]
[marking ENTRY_FUNCTION_NATIVE 0xdb3d7498 for recompilation, reason: hot and stable, ICs with typeinfo: 11/36 (30%)]
Did not inline now called from ENTRY_FUNCTION_NATIVE (target not inlineable).
Did not inline global.setTimeout called from ENTRY_FUNCTION_NATIVE (target requires context change).
[optimizing: ENTRY_FUNCTION_NATIVE / db3d7499 - took 0.000, 0.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_NATIVE at bailout #20, address 0x0, frame size 280
            ;;; @246: deoptimize.
[deoptimizing: begin 0xdb3d7499 ENTRY_FUNCTION_NATIVE @20]
  translating ENTRY_FUNCTION_NATIVE => node=242, height=64
    0x001bf370: [top + 96] <- 0x9b106c91 ; [sp + 56] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 88] <- 0x0296ac2d ; caller's pc
    0x001bf360: [top + 80] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 72] <- 0xdb3d7509; context
    0x001bf350: [top + 64] <- 0xdb3d7499; function
    0x001bf348: [top + 56] <- 0xdb3d7569 ; [sp + 80] 00000000DB3D7569 <an Object>
    0x001bf340: [top + 48] <- 000000009B104121 <undefined> ; literal
    0x001bf338: [top + 40] <- 0x9b104121 ; [sp + 72] 000000009B104121 <undefined>
    0x001bf330: [top + 32] <- 0xf424000000000 ; [sp + 88] 1000000
    0x001bf328: [top + 24] <- 3000000 ; [sp + 48] (smi)
    0x001bf320: [top + 16] <- 0xc8ee4671 ; [sp + 96] 00000000C8EE4671 <Number: 1370628812560>
    0x001bf318: [top + 8] <- 3000000 ; [sp + 104] (smi)
    0x001bf310: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xdb3d7499 ENTRY_FUNCTION_NATIVE => node=242, pc=0x029694bb, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: ENTRY_FUNCTION_NATIVE]
[marking ENTRY_FUNCTION_NATIVE 0xdb3d7498 for recompilation, reason: hot and stable, ICs with typeinfo: 14/36 (38%)]
Did not inline now called from ENTRY_FUNCTION_NATIVE (target not inlineable).
Did not inline global.setTimeout called from ENTRY_FUNCTION_NATIVE (target requires context change).
[optimizing: ENTRY_FUNCTION_NATIVE / db3d7499 - took 0.000, 0.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_NATIVE at bailout #29, address 0x0, frame size 280
            ;;; @318: deoptimize.
[deoptimizing: begin 0xdb3d7499 ENTRY_FUNCTION_NATIVE @29]
  translating ENTRY_FUNCTION_NATIVE => node=310, height=64
    0x001bf370: [top + 96] <- 0x9b106c91 ; r9 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 88] <- 0x0296ac2d ; caller's pc
    0x001bf360: [top + 80] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 72] <- 0xdb3d7509; context
    0x001bf350: [top + 64] <- 0xdb3d7499; function
    0x001bf348: [top + 56] <- 0xdb3d7569 ; rdi 00000000DB3D7569 <an Object>
    0x001bf340: [top + 48] <- 000000009B104121 <undefined> ; literal
    0x001bf338: [top + 40] <- 0xdb3d7599 ; rax 00000000DB3D7599 <an Object>
    0x001bf330: [top + 32] <- 0xf424000000000 ; rcx 1000000
    0x001bf328: [top + 24] <- 4294967295 ; r15 (heap number)
    0x001bf320: [top + 16] <- 0xc8ee4671 ; rbx 00000000C8EE4671 <Number: 1370628812560>
    0x001bf318: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf310: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xdb3d7499 ENTRY_FUNCTION_NATIVE => node=310, pc=0x029695ca, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
Materializing a new heap number FFFFFFFF00000000 [-1.000000e+000] in slot 00000000001BF328
[removing optimized code for: ENTRY_FUNCTION_NATIVE]
**** DEOPT: set at bailout #19, address 0x0, frame size 120
            ;;; @192: deoptimize.
[deoptimizing: begin 0x9b11f541 set @19]
  translating set => node=76, height=48
    0x001bf308: [top + 96] <- 0xdb3cdb29 ; [sp + 168] 00000000DB3CDB29 <a Map>
    0x001bf300: [top + 88] <- 0xd1204d49 ; [sp + 160] 00000000D1204D49 <String[1]: 0>
    0x001bf2f8: [top + 80] <- 0xdb3cdbc1 ; [sp + 152] 00000000DB3CDBC1 <an Object>
    0x001bf2f0: [top + 72] <- 0x0296995b ; caller's pc
    0x001bf2e8: [top + 64] <- 0x001bf360 ; caller's fp
    0x001bf2e0: [top + 56] <- 0xdb3c5cc9; context
    0x001bf2d8: [top + 48] <- 0x9b11f541; function
    0x001bf2d0: [top + 40] <- 000000009B104121 <undefined> ; literal
    0x001bf2c8: [top + 32] <- 000000009B104121 <undefined> ; literal
    0x001bf2c0: [top + 24] <- 000000009B104121 <undefined> ; literal
    0x001bf2b8: [top + 16] <- 000000009B104121 <undefined> ; literal
    0x001bf2b0: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf2a8: [top + 0] <- 0x9b11f541 ; [sp + 104] 000000009B11F541 <JS Function set>
  translating _keyAsBucketIndex => node=52, height=16
    0x001bf2a0: [top + 56] <- 0xdb3cdb29 ; [sp + 168] 00000000DB3CDB29 <a Map>
    0x001bf298: [top + 48] <- 0xd1204d49 ; [sp + 160] 00000000D1204D49 <String[1]: 0>
    0x001bf290: [top + 40] <- 0x02986a1e ; caller's pc
    0x001bf288: [top + 32] <- 0x001bf2e8 ; caller's fp
    0x001bf280: [top + 24] <- 0xdb3c5cc9; context
    0x001bf278: [top + 16] <- 0x9b11f1e1; function
    0x001bf270: [top + 8] <- 000000009B11F1E1 <JS Function _keyAsBucketIndex> ; literal
    0x001bf268: [top + 0] <- 0xdb3cece1 ; [sp + 96] 00000000DB3CECE1 <JS Function hash>
  translating hash => node=72, height=8
    0x001bf260: [top + 56] <- 000000009B104121 <undefined> ; literal
    0x001bf258: [top + 48] <- 0xd1204d49 ; [sp + 160] 00000000D1204D49 <String[1]: 0>
    0x001bf250: [top + 40] <- 0x20000000000000 ; [sp + 80] 2097152
    0x001bf248: [top + 32] <- 0x02986f7d ; caller's pc
    0x001bf240: [top + 24] <- 0x001bf288 ; caller's fp
    0x001bf238: [top + 16] <- 0xdb3c5cc9; context
    0x001bf230: [top + 8] <- 0xdb3cece1; function
    0x001bf228: [top + 0] <- 0xd5b382fe00000000 ; rbx -709655810
[deoptimizing: end 0xdb3cece1 hash => node=72, pc=0x0296f251, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: set]
**** DEOPT: _keyAsBucketIndex at bailout #17, address 0x0, frame size 80
            ;;; @158: deoptimize.
[deoptimizing: begin 0x9b11f1e1 _keyAsBucketIndex @17]
  translating _keyAsBucketIndex => node=52, height=16
    0x001bf2a0: [top + 56] <- 0xdb3cdb29 ; [sp + 120] 00000000DB3CDB29 <a Map>
    0x001bf298: [top + 48] <- 0xd1211d71 ; [sp + 112] 00000000D1211D71 <String[1]: 1>
    0x001bf290: [top + 40] <- 0x02986a1e ; caller's pc
    0x001bf288: [top + 32] <- 0x001bf2e8 ; caller's fp
    0x001bf280: [top + 24] <- 0xdb3c5cc9; context
    0x001bf278: [top + 16] <- 0x9b11f1e1; function
    0x001bf270: [top + 8] <- 0x9b11f1e1 ; [sp + 64] 000000009B11F1E1 <JS Function _keyAsBucketIndex>
    0x001bf268: [top + 0] <- 0xdb3cece1 ; [sp + 56] 00000000DB3CECE1 <JS Function hash>
  translating hash => node=72, height=8
    0x001bf260: [top + 56] <- 000000009B104121 <undefined> ; literal
    0x001bf258: [top + 48] <- 0xd1211d71 ; [sp + 112] 00000000D1211D71 <String[1]: 1>
    0x001bf250: [top + 40] <- 0x20000000000000 ; [sp + 40] 2097152
    0x001bf248: [top + 32] <- 0x02986f7d ; caller's pc
    0x001bf240: [top + 24] <- 0x001bf288 ; caller's fp
    0x001bf238: [top + 16] <- 0xdb3c5cc9; context
    0x001bf230: [top + 8] <- 0xdb3cece1; function
    0x001bf228: [top + 0] <- 0x6ba098d600000000 ; rbx 1805686998
[deoptimizing: end 0xdb3cece1 hash => node=72, pc=0x0296f251, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: _keyAsBucketIndex]
[optimizing: hash / db3cece1 - took 0.000, 0.000, 0.000 ms]
[marking _keyAsBucketIndex 0x9b11f1e0 for recompilation, reason: small function, ICs with typeinfo: 2/3 (66%)]
Inlined hash called from _keyAsBucketIndex.
[optimizing: _keyAsBucketIndex / 9b11f1e1 - took 0.000, 0.000, 0.000 ms]
[marking hashString 0xdb3ceb90 for recompilation, reason: small function, ICs with typeinfo: 14/15 (93%)]
Inlining builtin 000000009B118EA9 <JS Function charCodeAt>
[optimizing: hashString / db3ceb91 - took 0.000, 0.000, 0.000 ms]
[marking set 0x9b11f540 for recompilation, reason: hot and stable, ICs with typeinfo: 21/28 (75%)]
Inlined hash called from _keyAsBucketIndex.
Inlined _keyAsBucketIndex called from set.
Inlined _isOverCapacity called from _checkResize.
Inlined _checkResize called from set.
Inlined equals called from set.
[optimizing: set / 9b11f541 - took 0.000, 1.000, 0.000 ms]
[marking ENTRY_FUNCTION_MAP_STRING 0xdb3cda78 for recompilation, reason: not much type info but very hot, ICs with typeinfo: 4/36 (11%)]
Did not inline set called from ENTRY_FUNCTION_MAP_STRING (target text too big).
Did not inline global.setTimeout called from ENTRY_FUNCTION_MAP_STRING (target requires context change).
[optimizing: ENTRY_FUNCTION_MAP_STRING / db3cda79 - took 0.000, 0.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_MAP_STRING at bailout #12, address 0x0, frame size 312
            ;;; @146: deoptimize.
[deoptimizing: begin 0xdb3cda79 ENTRY_FUNCTION_MAP_STRING @12]
  translating ENTRY_FUNCTION_MAP_STRING => node=86, height=64
    0x001bf370: [top + 96] <- 0x9b106c91 ; [sp + 144] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 88] <- 0x0296ac7e ; caller's pc
    0x001bf360: [top + 80] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 72] <- 0xdb3cdae1; context
    0x001bf350: [top + 64] <- 0xdb3cda79; function
    0x001bf348: [top + 56] <- 0xdb3cdb29 ; [sp + 160] 00000000DB3CDB29 <a Map>
    0x001bf340: [top + 48] <- 0xdb3cdbc1 ; [sp + 168] 00000000DB3CDBC1 <an Object>
    0x001bf338: [top + 40] <- 0x9b104121 ; [sp + 120] 000000009B104121 <undefined>
    0x001bf330: [top + 32] <- 0xf424000000000 ; [sp + 176] 1000000
    0x001bf328: [top + 24] <- 1000000 ; [sp + 128] (smi)
    0x001bf320: [top + 16] <- 1000000 ; [sp + 208] (smi)
    0x001bf318: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf310: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xdb3cda79 ENTRY_FUNCTION_MAP_STRING => node=86, pc=0x029699fb, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: ENTRY_FUNCTION_MAP_STRING]
**** DEOPT: get at bailout #18, address 0x0, frame size 112
            ;;; @172: deoptimize.
[deoptimizing: begin 0x9b11f4f9 get @18]
  translating get => node=52, height=24
    0x001bf308: [top + 64] <- 0xdb3cdb29 ; [sp + 152] 00000000DB3CDB29 <a Map>
    0x001bf300: [top + 56] <- 0xd1204d49 ; [sp + 144] 00000000D1204D49 <String[1]: 0>
    0x001bf2f8: [top + 48] <- 0x02969a45 ; caller's pc
    0x001bf2f0: [top + 40] <- 0x001bf360 ; caller's fp
    0x001bf2e8: [top + 32] <- 0xdb3c5cc9; context
    0x001bf2e0: [top + 24] <- 0x9b11f4f9; function
    0x001bf2d8: [top + 16] <- 000000009B104121 <undefined> ; literal
    0x001bf2d0: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf2c8: [top + 0] <- 0x9b11f4f9 ; [sp + 96] 000000009B11F4F9 <JS Function get>
  translating _keyAsBucketIndex => node=52, height=16
    0x001bf2c0: [top + 56] <- 0xdb3cdb29 ; [sp + 152] 00000000DB3CDB29 <a Map>
    0x001bf2b8: [top + 48] <- 0xd1204d49 ; [sp + 144] 00000000D1204D49 <String[1]: 0>
    0x001bf2b0: [top + 40] <- 0x0298eee6 ; caller's pc
    0x001bf2a8: [top + 32] <- 0x001bf2f0 ; caller's fp
    0x001bf2a0: [top + 24] <- 0xdb3c5cc9; context
    0x001bf298: [top + 16] <- 0x9b11f1e1; function
    0x001bf290: [top + 8] <- 000000009B11F1E1 <JS Function _keyAsBucketIndex> ; literal
    0x001bf288: [top + 0] <- 0xdb3cece1 ; [sp + 88] 00000000DB3CECE1 <JS Function hash>
  translating hash => node=72, height=8
    0x001bf280: [top + 56] <- 000000009B104121 <undefined> ; literal
    0x001bf278: [top + 48] <- 0xd1204d49 ; [sp + 144] 00000000D1204D49 <String[1]: 0>
    0x001bf270: [top + 40] <- 0x20000000000000 ; [sp + 72] 2097152
    0x001bf268: [top + 32] <- 0x02986f7d ; caller's pc
    0x001bf260: [top + 24] <- 0x001bf2a8 ; caller's fp
    0x001bf258: [top + 16] <- 0xdb3c5cc9; context
    0x001bf250: [top + 8] <- 0xdb3cece1; function
    0x001bf248: [top + 0] <- 0xd5b382fe00000000 ; rbx -709655810
[deoptimizing: end 0xdb3cece1 hash => node=72, pc=0x0296f251, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: get]
[marking get 0x9b11f4f8 for recompilation, reason: small function, ICs with typeinfo: 6/8 (75%)]
Inlined hash called from _keyAsBucketIndex.
Inlined _keyAsBucketIndex called from get.
Inlined equals called from _getEntryIndexWithKey.
Inlined _getEntryIndexWithKey called from get.
[optimizing: get / 9b11f4f9 - took 1.000, 0.000, 0.000 ms]
[marking ENTRY_FUNCTION_MAP_STRING 0xdb3cda78 for recompilation, reason: hot and stable, ICs with typeinfo: 7/36 (19%)]
Did not inline set called from ENTRY_FUNCTION_MAP_STRING (target text too big).
Did not inline get called from ENTRY_FUNCTION_MAP_STRING (target requires context change).
Did not inline global.setTimeout called from ENTRY_FUNCTION_MAP_STRING (target requires context change).
[optimizing: ENTRY_FUNCTION_MAP_STRING / db3cda79 - took 0.000, 1.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_MAP_STRING at bailout #21, address 0x0, frame size 296
            ;;; @214: deoptimize.
[deoptimizing: begin 0xdb3cda79 ENTRY_FUNCTION_MAP_STRING @21]
  translating ENTRY_FUNCTION_MAP_STRING => node=200, height=72
    0x001bf370: [top + 104] <- 0x9b106c91 ; [sp + 112] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 96] <- 0x0296ac7e ; caller's pc
    0x001bf360: [top + 88] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 80] <- 0xdb3cdae1; context
    0x001bf350: [top + 72] <- 0xdb3cda79; function
    0x001bf348: [top + 64] <- 0xdb3cdb29 ; [sp + 128] 00000000DB3CDB29 <a Map>
    0x001bf340: [top + 56] <- 000000009B104121 <undefined> ; literal
    0x001bf338: [top + 48] <- 0xdb3cdbc1 ; [sp + 88] 00000000DB3CDBC1 <an Object>
    0x001bf330: [top + 40] <- 0xf424000000000 ; [sp + 192] 1000000
    0x001bf328: [top + 32] <- 100000 ; [sp + 96] (smi)
    0x001bf320: [top + 24] <- 000000009B104121 <undefined> ; literal
    0x001bf318: [top + 16] <- 000000009B104121 <undefined> ; literal
    0x001bf310: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf308: [top + 0] <- 0xc8f09ab1 ; rbx 00000000C8F09AB1 <Number: 1370628813011>
[deoptimizing: end 0xdb3cda79 ENTRY_FUNCTION_MAP_STRING => node=200, pc=0x02969b22, state=TOS_REG, alignment=no padding, took 0.000 ms]
[removing optimized code for: ENTRY_FUNCTION_MAP_STRING]
[marking ENTRY_FUNCTION_MAP_STRING 0xdb3cda78 for recompilation, reason: hot and stable, ICs with typeinfo: 10/36 (27%)]
Did not inline set called from ENTRY_FUNCTION_MAP_STRING (target text too big).
Did not inline get called from ENTRY_FUNCTION_MAP_STRING (target requires context change).
Did not inline get called from ENTRY_FUNCTION_MAP_STRING (target requires context change).
Did not inline global.setTimeout called from ENTRY_FUNCTION_MAP_STRING (target requires context change).
[optimizing: ENTRY_FUNCTION_MAP_STRING / db3cda79 - took 0.000, 0.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_MAP_STRING at bailout #28, address 0x0, frame size 304
            ;;; @272: deoptimize.
[deoptimizing: begin 0xdb3cda79 ENTRY_FUNCTION_MAP_STRING @28]
  translating ENTRY_FUNCTION_MAP_STRING => node=234, height=64
    0x001bf370: [top + 96] <- 0x9b106c91 ; [sp + 64] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 88] <- 0x0296ac7e ; caller's pc
    0x001bf360: [top + 80] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 72] <- 0xdb3cdae1; context
    0x001bf350: [top + 64] <- 0xdb3cda79; function
    0x001bf348: [top + 56] <- 0xdb3cdb29 ; [sp + 88] 00000000DB3CDB29 <a Map>
    0x001bf340: [top + 48] <- 000000009B104121 <undefined> ; literal
    0x001bf338: [top + 40] <- 0xdb3cdbc1 ; [sp + 80] 00000000DB3CDBC1 <an Object>
    0x001bf330: [top + 32] <- 0xf424000000000 ; [sp + 96] 1000000
    0x001bf328: [top + 24] <- 1000000 ; [sp + 48] (smi)
    0x001bf320: [top + 16] <- 1000000 ; [sp + 104] (smi)
    0x001bf318: [top + 8] <- 0xc8f09ab1 ; [sp + 200] 00000000C8F09AB1 <Number: 1370628813011>
    0x001bf310: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xdb3cda79 ENTRY_FUNCTION_MAP_STRING => node=234, pc=0x02969c10, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: ENTRY_FUNCTION_MAP_STRING]
[marking ENTRY_FUNCTION_MAP_STRING 0xdb3cda78 for recompilation, reason: hot and stable, ICs with typeinfo: 14/36 (38%)]
Did not inline set called from ENTRY_FUNCTION_MAP_STRING (target text too big).
Did not inline get called from ENTRY_FUNCTION_MAP_STRING (target requires context change).
Did not inline get called from ENTRY_FUNCTION_MAP_STRING (target requires context change).
Did not inline get called from ENTRY_FUNCTION_MAP_STRING (target requires context change).
Did not inline global.setTimeout called from ENTRY_FUNCTION_MAP_STRING (target requires context change).
[optimizing: ENTRY_FUNCTION_MAP_STRING / db3cda79 - took 0.000, 0.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_MAP_STRING at bailout #40, address 0x0, frame size 312
            ;;; @372: deoptimize.
[deoptimizing: begin 0xdb3cda79 ENTRY_FUNCTION_MAP_STRING @40]
  translating ENTRY_FUNCTION_MAP_STRING => node=334, height=64
    0x001bf370: [top + 96] <- 0x9b106c91 ; [sp + 40] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 88] <- 0x0296ac7e ; caller's pc
    0x001bf360: [top + 80] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 72] <- 0xdb3cdae1; context
    0x001bf350: [top + 64] <- 0xdb3cda79; function
    0x001bf348: [top + 56] <- 0xdb3cdb29 ; [sp + 64] 00000000DB3CDB29 <a Map>
    0x001bf340: [top + 48] <- 000000009B104121 <undefined> ; literal
    0x001bf338: [top + 40] <- 0xdb3cdbc1 ; [sp + 56] 00000000DB3CDBC1 <an Object>
    0x001bf330: [top + 32] <- 0xf424000000000 ; [sp + 72] 1000000
    0x001bf328: [top + 24] <- 4294967295 ; [sp + 24] (heap number)
    0x001bf320: [top + 16] <- 000000009B104121 <undefined> ; literal
    0x001bf318: [top + 8] <- 0xc8f09ab1 ; [sp + 208] 00000000C8F09AB1 <Number: 1370628813011>
    0x001bf310: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xdb3cda79 ENTRY_FUNCTION_MAP_STRING => node=334, pc=0x02969d75, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
Materializing a new heap number FFFFFFFF00000000 [-1.000000e+000] in slot 00000000001BF328
[removing optimized code for: ENTRY_FUNCTION_MAP_STRING]
[marking ENTRY_FUNCTION_NATIVE_STRING 0xc9f04178 for recompilation, reason: not much type info but very hot, ICs with typeinfo: 3/38 (7%)]
Did not inline global.setTimeout called from ENTRY_FUNCTION_NATIVE_STRING (target requires context change).
[optimizing: ENTRY_FUNCTION_NATIVE_STRING / c9f04179 - took 0.000, 1.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_NATIVE_STRING at bailout #8, address 0x0, frame size 336
            ;;; @122: deoptimize.
[deoptimizing: begin 0xc9f04179 ENTRY_FUNCTION_NATIVE_STRING @8]
  translating ENTRY_FUNCTION_NATIVE_STRING => node=76, height=80
    0x001bf370: [top + 112] <- 0x9b106c91 ; [sp + 136] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 104] <- 0x0296accf ; caller's pc
    0x001bf360: [top + 96] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 88] <- 0xc9f04101; context
    0x001bf350: [top + 80] <- 0xc9f04179; function
    0x001bf348: [top + 72] <- 0xc9f04161 ; [sp + 152] 00000000C9F04161 <an Object>
    0x001bf340: [top + 64] <- 0xc9f04149 ; [sp + 160] 00000000C9F04149 <an Object>
    0x001bf338: [top + 56] <- 0x9b104121 ; [sp + 168] 000000009B104121 <undefined>
    0x001bf330: [top + 48] <- 0xf424000000000 ; [sp + 176] 1000000
    0x001bf328: [top + 40] <- 1000000 ; [sp + 184] (smi)
    0x001bf320: [top + 32] <- 1000000 ; [sp + 192] (smi)
    0x001bf318: [top + 24] <- 000000009B104121 <undefined> ; literal
    0x001bf310: [top + 16] <- 000000009B104121 <undefined> ; literal
    0x001bf308: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf300: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xc9f04179 ENTRY_FUNCTION_NATIVE_STRING => node=76, pc=0x0297beb5, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: ENTRY_FUNCTION_NATIVE_STRING]
[marking ENTRY_FUNCTION_NATIVE_STRING 0xc9f04178 for recompilation, reason: hot and stable, ICs with typeinfo: 6/38 (15%)]
Did not inline global.setTimeout called from ENTRY_FUNCTION_NATIVE_STRING (target requires context change).
[optimizing: ENTRY_FUNCTION_NATIVE_STRING / c9f04179 - took 0.000, 0.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_NATIVE_STRING at bailout #14, address 0x0, frame size 320
            ;;; @170: deoptimize.
[deoptimizing: begin 0xc9f04179 ENTRY_FUNCTION_NATIVE_STRING @14]
  translating ENTRY_FUNCTION_NATIVE_STRING => node=137, height=80
    0x001bf370: [top + 112] <- 0x9b106c91 ; [sp + 120] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 104] <- 0x0296accf ; caller's pc
    0x001bf360: [top + 96] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 88] <- 0xc9f04101; context
    0x001bf350: [top + 80] <- 0xc9f04179; function
    0x001bf348: [top + 72] <- 0xc9f04161 ; [sp + 136] 00000000C9F04161 <an Object>
    0x001bf340: [top + 64] <- 000000009B104121 <undefined> ; literal
    0x001bf338: [top + 56] <- 0x9b104121 ; [sp + 144] 000000009B104121 <undefined>
    0x001bf330: [top + 48] <- 0xf424000000000 ; [sp + 184] 1000000
    0x001bf328: [top + 40] <- 100000 ; [sp + 104] (smi)
    0x001bf320: [top + 32] <- 000000009B104121 <undefined> ; literal
    0x001bf318: [top + 24] <- 000000009B104121 <undefined> ; literal
    0x001bf310: [top + 16] <- 000000009B104121 <undefined> ; literal
    0x001bf308: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf300: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xc9f04179 ENTRY_FUNCTION_NATIVE_STRING => node=137, pc=0x0297bfa0, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: ENTRY_FUNCTION_NATIVE_STRING]
[marking hasOwnProperty 0x9b1110e0 for recompilation, reason: small function, ICs with typeinfo: 0/5 (0%)]
Did not inline NonStringToString called from hasOwnProperty (target not inlineable).
Did not inline CallTrap1 called from hasOwnProperty (target not inlineable).
Did not inline ToObject called from hasOwnProperty (target not inlineable).
Did not inline NonStringToString called from hasOwnProperty (target not inlineable).
[optimizing: hasOwnProperty / 9b1110e1 - took 0.000, 1.000, 0.000 ms]
[marking ENTRY_FUNCTION_NATIVE_STRING 0xc9f04178 for recompilation, reason: hot and stable, ICs with typeinfo: 10/38 (26%)]
Did not inline now called from ENTRY_FUNCTION_NATIVE_STRING (target not inlineable).
Did not inline call called from ENTRY_FUNCTION_NATIVE_STRING (target not inlineable).
Did not inline global.setTimeout called from ENTRY_FUNCTION_NATIVE_STRING (target requires context change).
[optimizing: ENTRY_FUNCTION_NATIVE_STRING / c9f04179 - took 0.000, 0.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_NATIVE_STRING at bailout #27, address 0x0, frame size 328
            ;;; @276: deoptimize.
[deoptimizing: begin 0xc9f04179 ENTRY_FUNCTION_NATIVE_STRING @27]
  translating ENTRY_FUNCTION_NATIVE_STRING => node=223, height=80
    0x001bf370: [top + 112] <- 0x9b106c91 ; [sp + 64] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 104] <- 0x0296accf ; caller's pc
    0x001bf360: [top + 96] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 88] <- 0xc9f04101; context
    0x001bf350: [top + 80] <- 0xc9f04179; function
    0x001bf348: [top + 72] <- 0xc9f04161 ; [sp + 96] 00000000C9F04161 <an Object>
    0x001bf340: [top + 64] <- 000000009B104121 <undefined> ; literal
    0x001bf338: [top + 56] <- 0xc9f04149 ; [sp + 88] 00000000C9F04149 <an Object>
    0x001bf330: [top + 48] <- 0xf424000000000 ; [sp + 104] 1000000
    0x001bf328: [top + 40] <- 1000000 ; [sp + 48] (smi)
    0x001bf320: [top + 32] <- 1000000 ; [sp + 120] (smi)
    0x001bf318: [top + 24] <- 0x9b1110e1 ; [sp + 112] 000000009B1110E1 <JS Function hasOwnProperty>
    0x001bf310: [top + 16] <- 0xc9fe66a9 ; [sp + 192] 00000000C9FE66A9 <Number: 1370628813461>
    0x001bf308: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf300: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xc9f04179 ENTRY_FUNCTION_NATIVE_STRING => node=223, pc=0x0297c110, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
[removing optimized code for: ENTRY_FUNCTION_NATIVE_STRING]
[marking ENTRY_FUNCTION_NATIVE_STRING 0xc9f04178 for recompilation, reason: hot and stable, ICs with typeinfo: 15/38 (39%)]
Did not inline now called from ENTRY_FUNCTION_NATIVE_STRING (target not inlineable).
Did not inline call called from ENTRY_FUNCTION_NATIVE_STRING (target not inlineable).
Did not inline call called from ENTRY_FUNCTION_NATIVE_STRING (target not inlineable).
Did not inline global.setTimeout called from ENTRY_FUNCTION_NATIVE_STRING (target requires context change).
[optimizing: ENTRY_FUNCTION_NATIVE_STRING / c9f04179 - took 0.000, 0.000, 0.000 ms]
**** DEOPT: ENTRY_FUNCTION_NATIVE_STRING at bailout #42, Completed 3000000 operations in 292 milliseconds.  10273973 OP/s when using when using DS.Map with integers
Completed 3000000 operations in 44 milliseconds.  68181818 OP/s when using Native with integers
Completed 2000000 operations in 286 milliseconds.  6993007 OP/s when using DS.Map with strings
Completed 2000000 operations in 147 milliseconds.  13605442 OP/s when using Native with strings
address 0x0, frame size 336
            ;;; @400: deoptimize.
[deoptimizing: begin 0xc9f04179 ENTRY_FUNCTION_NATIVE_STRING @42]
  translating ENTRY_FUNCTION_NATIVE_STRING => node=338, height=80
    0x001bf370: [top + 112] <- 0x9b106c91 ; [sp + 40] 000000009B106C91 <JS Global Object>
    0x001bf368: [top + 104] <- 0x0296accf ; caller's pc
    0x001bf360: [top + 96] <- 0x001bf3a8 ; caller's fp
    0x001bf358: [top + 88] <- 0xc9f04101; context
    0x001bf350: [top + 80] <- 0xc9f04179; function
    0x001bf348: [top + 72] <- 0xc9f04161 ; [sp + 72] 00000000C9F04161 <an Object>
    0x001bf340: [top + 64] <- 000000009B104121 <undefined> ; literal
    0x001bf338: [top + 56] <- 0xc9f04149 ; [sp + 64] 00000000C9F04149 <an Object>
    0x001bf330: [top + 48] <- 0xf424000000000 ; [sp + 80] 1000000
    0x001bf328: [top + 40] <- 4294967295 ; [sp + 24] (heap number)
    0x001bf320: [top + 32] <- 000000009B104121 <undefined> ; literal
    0x001bf318: [top + 24] <- 0x9b1110e1 ; [sp + 88] 000000009B1110E1 <JS Function hasOwnProperty>
    0x001bf310: [top + 16] <- 0xc9fe66a9 ; [sp + 200] 00000000C9FE66A9 <Number: 1370628813461>
    0x001bf308: [top + 8] <- 000000009B104121 <undefined> ; literal
    0x001bf300: [top + 0] <- 000000009B104121 <undefined> ; literal
[deoptimizing: end 0xc9f04179 ENTRY_FUNCTION_NATIVE_STRING => node=338, pc=0x0297c287, state=NO_REGISTERS, alignment=no padding, took 0.000 ms]
Materializing a new heap number FFFFFFFF00000000 [-1.000000e+000] in slot 00000000001BF328
[removing optimized code for: ENTRY_FUNCTION_NATIVE_STRING]
[marking IN 0x9b10ab70 for recompilation, reason: hot and stable, ICs with typeinfo: 1/2 (50%)]
[disabled optimization for IN, reason: call to a JavaScript runtime function]
